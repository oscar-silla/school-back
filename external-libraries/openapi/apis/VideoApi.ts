/* tslint:disable */
/* eslint-disable */
/**
 * School API
 * School API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: orscarsilla@outlook.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  VideoRequest,
  VideoResponse,
  VideoSourceRequest,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    VideoRequestFromJSON,
    VideoRequestToJSON,
    VideoResponseFromJSON,
    VideoResponseToJSON,
    VideoSourceRequestFromJSON,
    VideoSourceRequestToJSON,
} from '../models';

export interface CreateVideoRequest {
    body: VideoRequest;
}

export interface GetVideoRequest {
    id: string;
}

export interface ModifyVideoRequest {
    id: string;
    body: VideoSourceRequest;
}

/**
 * 
 */
export class VideoApi extends runtime.BaseAPI {

    /**
     * Create video
     * Create video
     */
    async createVideoRaw(requestParameters: CreateVideoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createVideo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/video`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VideoRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create video
     * Create video
     */
    async createVideo(requestParameters: CreateVideoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createVideoRaw(requestParameters, initOverrides);
    }

    /**
     * Get existing video by ObjectId.
     * Get an existing video
     */
    async getVideoRaw(requestParameters: GetVideoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getVideo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/video/{id}`.replace(`{${"_id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoResponseFromJSON(jsonValue));
    }

    /**
     * Get existing video by ObjectId.
     * Get an existing video
     */
    async getVideo(requestParameters: GetVideoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoResponse> {
        const response = await this.getVideoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify \'src\' from video.
     * Modify an existing video
     */
    async modifyVideoRaw(requestParameters: ModifyVideoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling modifyVideo.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling modifyVideo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/video/{id}`.replace(`{${"_id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VideoSourceRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Modify \'src\' from video.
     * Modify an existing video
     */
    async modifyVideo(requestParameters: ModifyVideoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.modifyVideoRaw(requestParameters, initOverrides);
    }

}
