/* tslint:disable */
/* eslint-disable */
/**
 * School API
 * School API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: orscarsilla@outlook.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SectionBody,
  SectionResponse,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SectionBodyFromJSON,
    SectionBodyToJSON,
    SectionResponseFromJSON,
    SectionResponseToJSON,
} from '../models';

export interface CreateSectionRequest {
    body: SectionBody;
}

export interface DeleteSectionRequest {
    id: string;
}

export interface GetSectionRequest {
    id: string;
}

export interface ModifySectionRequest {
    id: string;
    body: SectionBody;
}

/**
 * 
 */
export class SectionApi extends runtime.BaseAPI {

    /**
     * Create section
     * Create section
     */
    async createSectionRaw(requestParameters: CreateSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createSection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectionBodyToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create section
     * Create section
     */
    async createSection(requestParameters: CreateSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createSectionRaw(requestParameters, initOverrides);
    }

    /**
     * Delete an existing section by ObjectId
     * Delete an existing section
     */
    async deleteSectionRaw(requestParameters: DeleteSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sections/{id}`.replace(`{${"_id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing section by ObjectId
     * Delete an existing section
     */
    async deleteSection(requestParameters: DeleteSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSectionRaw(requestParameters, initOverrides);
    }

    /**
     * Get an existing section by ObjectId.
     * Get an existing section
     */
    async getSectionRaw(requestParameters: GetSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SectionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sections/{id}`.replace(`{${"_id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectionResponseFromJSON(jsonValue));
    }

    /**
     * Get an existing section by ObjectId.
     * Get an existing section
     */
    async getSection(requestParameters: GetSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SectionResponse> {
        const response = await this.getSectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all sections
     * Get sections
     */
    async getSectionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SectionResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SectionResponseFromJSON));
    }

    /**
     * Get all sections
     * Get sections
     */
    async getSections(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SectionResponse>> {
        const response = await this.getSectionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Modify an existing section by ObjectId
     * Modify an existing section
     */
    async modifySectionRaw(requestParameters: ModifySectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling modifySection.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling modifySection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sections/{id}`.replace(`{${"_id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SectionBodyToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Modify an existing section by ObjectId
     * Modify an existing section
     */
    async modifySection(requestParameters: ModifySectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.modifySectionRaw(requestParameters, initOverrides);
    }

}
